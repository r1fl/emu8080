// generics?

fn Unimplemented() {
	panic!("Unimplemented instruction");
}

fn NOP() {

}

fn mov<T, U>(dst: T, src: U) {
}

/*
LXI_B_d16
STAX_B
INX_B
INR_B
DCR_B
MVI_B_d8
RLC
NOP
DAD_B
LDAX_B
DCX_B
INR_C
DCR_C
MVI_C_d8
RRC
NOP
LXI_D_d16
STAX_D
INX_D
INR_D
DCR_D
MVI_D_d8
RAL
NOP
DAD_D
LDAX_D
DCX_D
INR_E
DCR_E
MVI_E_d8
RAR
NOP
LXI_H_d16
SHLD_a16
INX_H
INR_H
DCR_H
MVI_H_d8
DAA
NOP
DAD_H
LHLD_a16
DCX_H
INR_L
DCR_L
MVI_L_d8
CMA
NOP
LXI_SP_d16
STA_a16
INX_SP
INR_M
DCR_M
MVI_M_d8
STC
NOP
DAD_SP
LDA_a16
DCX_SP
INR_A
DCR_A
MVI_A_d8
CMC
MOV_B_B
MOV_B_C
MOV_B_D
MOV_B_E
MOV_B_H
MOV_B_L
MOV_B_M
MOV_B_A
MOV_C_B
MOV_C_C
MOV_C_D
MOV_C_E
MOV_C_H
MOV_C_L
MOV_C_M
MOV_C_A
MOV_D_B
MOV_D_C
MOV_D_D
MOV_D_E
MOV_D_H
MOV_D_L
MOV_D_M
MOV_D_A
MOV_E_B
MOV_E_C
MOV_E_D
MOV_E_E
MOV_E_H
MOV_E_L
MOV_E_M
MOV_E_A
MOV_H_B
MOV_H_C
MOV_H_D
MOV_H_E
MOV_H_H
MOV_H_L
MOV_H_M
MOV_H_A
MOV_L_B
MOV_L_C
MOV_L_D
MOV_L_E
MOV_L_H
MOV_L_L
MOV_L_M
MOV_L_A
MOV_M_B
MOV_M_C
MOV_M_D
MOV_M_E
MOV_M_H
MOV_M_L
HLT
MOV_M_A
MOV_A_B
MOV_A_C
MOV_A_D
MOV_A_E
MOV_A_H
MOV_A_L
MOV_A_M
MOV_A_A
ADD_B
ADD_C
ADD_D
ADD_E
ADD_H
ADD_L
ADD_M
ADD_A
ADC_B
ADC_C
ADC_D
ADC_E
ADC_H
ADC_L
ADC_M
ADC_A
SUB_B
SUB_C
SUB_D
SUB_E
SUB_H
SUB_L
SUB_M
SUB_A
SBB_B
SBB_C
SBB_D
SBB_E
SBB_H
SBB_L
SBB_M
SBB_A
ANA_B
ANA_C
ANA_D
ANA_E
ANA_H
ANA_L
ANA_M
ANA_A
XRA_B
XRA_C
XRA_D
XRA_E
XRA_H
XRA_L
XRA_M
XRA_A
ORA_B
ORA_C
ORA_D
ORA_E
ORA_H
ORA_L
ORA_M
ORA_A
CMP_B
CMP_C
CMP_D
CMP_E
CMP_H
CMP_L
CMP_M
CMP_A
RNZ
POP_B
JNZ_a16
JMP_a16
CNZ_a16
PUSH_B
ADI_d8
RST_0
RZ
RET
JZ_a16
JMP_a16
CZ_a16
CALL_a16
ACI_d8
RST_1
RNC
POP_D
JNC_a16
OUT_d8
CNC_a16
PUSH_D
SUI_d8
RST_2
RC
RET
JC_a16
IN_d8
CC_a16
CALL_a16
SBI_d8
RST_3
RPO
POP_H
JPO_a16
XTHL
CPO_a16
PUSH_H
ANI_d8
RST_4
RPE
PCHL
JPE_a16
XCHG
CPE_a16
CALL_a16
XRI_d8
RST_5
RP
POP_PSW
JP_a16
DI
CP_a16
PUSH_PSW
ORI_d8
RST_6
RM
SPHL
JM_a16
EI
CM_a16
CALL_a16
CPI_d8
RST_7
*/
